// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello_http.proto

/*
Package hello_http is a generated protocol buffer package.

It is generated from these files:
	hello_http.proto

It has these top-level messages:
	HelloHTTPRequest
	HelloHTTPResponse
*/
package hello_http

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// HelloRequest 请求结构
type HelloHTTPRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloHTTPRequest) Reset()                    { *m = HelloHTTPRequest{} }
func (m *HelloHTTPRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloHTTPRequest) ProtoMessage()               {}
func (*HelloHTTPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloHTTPRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// HelloResponse 响应结构
type HelloHTTPResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloHTTPResponse) Reset()                    { *m = HelloHTTPResponse{} }
func (m *HelloHTTPResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloHTTPResponse) ProtoMessage()               {}
func (*HelloHTTPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloHTTPResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloHTTPRequest)(nil), "hello_http.HelloHTTPRequest")
	proto.RegisterType((*HelloHTTPResponse)(nil), "hello_http.HelloHTTPResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HelloHTTP service

type HelloHTTPClient interface {
	// 定义SayHello方法
	SayHello(ctx context.Context, in *HelloHTTPRequest, opts ...grpc.CallOption) (*HelloHTTPResponse, error)
	// 定义SayHello方法
	StreamHello(ctx context.Context, opts ...grpc.CallOption) (HelloHTTP_StreamHelloClient, error)
}

type helloHTTPClient struct {
	cc *grpc.ClientConn
}

func NewHelloHTTPClient(cc *grpc.ClientConn) HelloHTTPClient {
	return &helloHTTPClient{cc}
}

func (c *helloHTTPClient) SayHello(ctx context.Context, in *HelloHTTPRequest, opts ...grpc.CallOption) (*HelloHTTPResponse, error) {
	out := new(HelloHTTPResponse)
	err := grpc.Invoke(ctx, "/hello_http.HelloHTTP/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloHTTPClient) StreamHello(ctx context.Context, opts ...grpc.CallOption) (HelloHTTP_StreamHelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HelloHTTP_serviceDesc.Streams[0], c.cc, "/hello_http.HelloHTTP/StreamHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloHTTPStreamHelloClient{stream}
	return x, nil
}

type HelloHTTP_StreamHelloClient interface {
	Send(*HelloHTTPRequest) error
	Recv() (*HelloHTTPResponse, error)
	grpc.ClientStream
}

type helloHTTPStreamHelloClient struct {
	grpc.ClientStream
}

func (x *helloHTTPStreamHelloClient) Send(m *HelloHTTPRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloHTTPStreamHelloClient) Recv() (*HelloHTTPResponse, error) {
	m := new(HelloHTTPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HelloHTTP service

type HelloHTTPServer interface {
	// 定义SayHello方法
	SayHello(context.Context, *HelloHTTPRequest) (*HelloHTTPResponse, error)
	// 定义SayHello方法
	StreamHello(HelloHTTP_StreamHelloServer) error
}

func RegisterHelloHTTPServer(s *grpc.Server, srv HelloHTTPServer) {
	s.RegisterService(&_HelloHTTP_serviceDesc, srv)
}

func _HelloHTTP_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloHTTPServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello_http.HelloHTTP/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloHTTPServer).SayHello(ctx, req.(*HelloHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloHTTP_StreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloHTTPServer).StreamHello(&helloHTTPStreamHelloServer{stream})
}

type HelloHTTP_StreamHelloServer interface {
	Send(*HelloHTTPResponse) error
	Recv() (*HelloHTTPRequest, error)
	grpc.ServerStream
}

type helloHTTPStreamHelloServer struct {
	grpc.ServerStream
}

func (x *helloHTTPStreamHelloServer) Send(m *HelloHTTPResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloHTTPStreamHelloServer) Recv() (*HelloHTTPRequest, error) {
	m := new(HelloHTTPRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloHTTP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello_http.HelloHTTP",
	HandlerType: (*HelloHTTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloHTTP_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHello",
			Handler:       _HelloHTTP_StreamHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello_http.proto",
}

func init() { proto.RegisterFile("hello_http.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x8f, 0xcf, 0x28, 0x29, 0x29, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x48, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x27, 0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5,
	0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x54, 0x2a, 0xa9, 0x71, 0x09, 0x78, 0x80,
	0xd4, 0x7a, 0x84, 0x84, 0x04, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1,
	0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0xba, 0x5c,
	0x82, 0x48, 0xea, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b,
	0x8b, 0x13, 0xd3, 0x61, 0x6a, 0x61, 0x5c, 0xa3, 0x7b, 0x8c, 0x5c, 0x9c, 0x70, 0xf5, 0x42, 0x89,
	0x5c, 0x1c, 0xc1, 0x89, 0x95, 0x60, 0xbe, 0x90, 0x8c, 0x1e, 0x92, 0x6b, 0xd1, 0xad, 0x96, 0x92,
	0xc5, 0x21, 0x0b, 0xb1, 0x50, 0x49, 0xa2, 0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0x42, 0x4a, 0xbc, 0xfa,
	0xa9, 0x15, 0x89, 0xb9, 0x05, 0x39, 0xa9, 0xfa, 0xa9, 0xc9, 0x19, 0xf9, 0x56, 0x8c, 0x5a, 0x42,
	0x79, 0x5c, 0xdc, 0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x54, 0xb0, 0x45, 0x0e, 0x6c, 0x8b, 0x84,
	0x92, 0x30, 0xdc, 0x96, 0x62, 0xb0, 0xd1, 0x50, 0xbb, 0x34, 0x18, 0x0d, 0x18, 0x9d, 0x78, 0xa2,
	0x90, 0xc2, 0x38, 0x89, 0x0d, 0x1c, 0x98, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0xc9,
	0x8c, 0x5a, 0x8a, 0x01, 0x00, 0x00,
}
